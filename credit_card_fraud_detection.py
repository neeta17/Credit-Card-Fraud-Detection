# -*- coding: utf-8 -*-
"""Credit card Fraud Detection

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZlsrassH_5NlzAyG3ITQ2bCaIuPMwiiY

Importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression 
from sklearn.metrics import accuracy_score

#loading dataset to pandas dataframe
credit_card_data=pd.read_csv("/content/creditcard.csv")

credit_card_data.head()

credit_card_data.tail()

credit_card_data.info()

# checking no of missing values
credit_card_data.isnull().sum()

credit_card_data['V7'].mean()

# filling the missing values  with "Mean" value
credit_card_data['V7'].fillna(credit_card_data['V7'].mean(), inplace=True)

miss_values_V7=credit_card_data['V7'].isnull()

print(miss_values_V7)

credit_card_data['V8'].mean()

credit_card_data['V8'].fillna(credit_card_data['V8'].mean(), inplace=True)

credit_card_data['V9'].mean()
credit_card_data['V9'].fillna(credit_card_data['V9'].mean(), inplace=True)

credit_card_data['V10'].mean()
credit_card_data['V10'].fillna(credit_card_data['V10'].mean(), inplace=True)

credit_card_data['V11'].mean()
credit_card_data['V11'].fillna(credit_card_data['V11'].mean(), inplace=True)

credit_card_data['V12'].mean()
credit_card_data['V12'].fillna(credit_card_data['V12'].mean(), inplace=True)

credit_card_data['V13'].mean()
credit_card_data['V13'].fillna(credit_card_data['V13'].mean(), inplace=True)

credit_card_data['V14'].mean()
credit_card_data['V14'].fillna(credit_card_data['V14'].mean(), inplace=True)

credit_card_data['V15'].mean()
credit_card_data['V15'].fillna(credit_card_data['V15'].mean(), inplace=True)

credit_card_data['V16'].mean()
credit_card_data['V16'].fillna(credit_card_data['V16'].mean(), inplace=True)

credit_card_data['V17'].mean()
credit_card_data['V17'].fillna(credit_card_data['V17'].mean(), inplace=True)

credit_card_data['V18'].mean()
credit_card_data['V18'].fillna(credit_card_data['V18'].mean(), inplace=True)

credit_card_data['V19'].mean()
credit_card_data['V19'].fillna(credit_card_data['V19'].mean(), inplace=True)

credit_card_data['V20'].mean()
credit_card_data['V20'].fillna(credit_card_data['V20'].mean(), inplace=True)

credit_card_data['V21'].mean()
credit_card_data['V21'].fillna(credit_card_data['V21'].mean(), inplace=True)

credit_card_data['V22'].mean()
credit_card_data['V22'].fillna(credit_card_data['V22'].mean(), inplace=True)

credit_card_data['V23'].mean()
credit_card_data['V23'].fillna(credit_card_data['V23'].mean(), inplace=True)

credit_card_data['V24'].mean()
credit_card_data['V24'].fillna(credit_card_data['V24'].mean(), inplace=True)

credit_card_data['V25'].mean()
credit_card_data['V25'].fillna(credit_card_data['V25'].mean(), inplace=True)

credit_card_data['V26'].mean()
credit_card_data['V26'].fillna(credit_card_data['V26'].mean(), inplace=True)

credit_card_data['V27'].mean()
credit_card_data['V27'].fillna(credit_card_data['V27'].mean(), inplace=True)

credit_card_data['V28'].mean()
credit_card_data['V28'].fillna(credit_card_data['V28'].mean(), inplace=True)

credit_card_data['Amount'].mean()
credit_card_data['Amount'].fillna(credit_card_data['Amount'].mean(), inplace=True)

credit_card_data.isnull().sum()

credit_card_data['Class'].mode()

credit_card_data['Class'].fillna(credit_card_data['Class'].mode(), inplace=True)

credit_card_data.isnull().sum()

credit_card_data["Class"].value_counts()

for i in 'Class':
   if i==0.002731: 
       credit_card_data['Class'].fillna(0, inplace=True)

credit_card_data.isnull().sum()

credit_card_data["Class"].value_counts()

"""This data set is highly unbalanced

0-normal transaction
1-fraudulent transaction

"""

# separating data for analysis
legit=credit_card_data[credit_card_data.Class==0]
fraud=credit_card_data[credit_card_data.Class==1]

print(legit.shape)
print(fraud.shape)

"""#statistical measures of data

"""

legit.Amount.describe()

fraud.Amount.describe()

#compare values for both type of transaction
credit_card_data.groupby('Class').mean()

"""Under sampling

Build a dataset containing similar distribution of normal transactions and fraudulent transactions

No of frauddulent transactions:
"""

legit_sample=legit.sample(n=103)

"""concatenate two dataframes

"""

new_dataset=pd.concat([legit_sample,fraud],axis=0)

new_dataset.head()

new_dataset.tail()

new_dataset['Class'].value_counts()

credit_card_data.groupby('Class').mean()

"""Splitting data into features and Targets"""

X=new_dataset.drop(columns='Class',axis=1)
Y=new_dataset['Class']

print(Y)

"""splitting data into training data and testing data"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training

Logistic Regression
"""

model=LogisticRegression()

# training the Logistic Regression Model with Training Data
model.fit(X_train,Y_train)

"""Model Evaluation

Accuracy score
"""

# accuracy on training data
X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print("Accuracy on training data accuracy")
print(training_data_accuracy)

# accuracy on test data
X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print(test_data_accuracy)

